#!/usr/bin/env python
print('''
###############################################################################
# Multi-platform ECS-optimized AMI ID fetcher
# Author: ericn@amazon.com
#
# Fetches the various flavors of ECS-optimized Linux and Windows AMI Ids and 
# writes to stdout and the ../amis.ent file.
#
# You need 5 different AWS profiles in your ~/.aws/credentials file:
#    - admin (this is your regular, global AWS account)
#    - bjs-ec2-read-only (this is a BJS account that you must set up separately.
#      See https://w.amazon.com/index.php/DevSupport/PEK/CS/Creating_a_new_AWS_account_in_BJS
#    - govcloud (this is a GovCloud test account that you set up separately.
#      See https://w.amazon.com/index.php/GovCloud/GovCloudTestAccount)
#    - hkg (Hong Kong specific profile)
#    - bah (Bahrain specific profile)
#
# You also must create an S3 bucket with your username in it using the following command:
#   aws s3 mb s3://$USER-ecs-ami-info
#
# Update the datecodes for each AMI type below whenever a new AMI is released.
#
###############################################################################
''')

import re
from collections import OrderedDict
import botocore.session
import boto3
import getpass
import os
import time
import operator

# AMI datecodes
al2_datecode = '20190815'
al2arm_datecode = '20190815'
al2gpu_datecode = '20190815'
linux_datecode = '2018.03.w'
windows_2016_datecode = '2019.08.16'
windows_2019_datecode = '2019.08.16'

# Windows ECS agent and Docker versions
windows_2016_current_docker_version = "19.03.1"
windows_2016_current_agent_version = "1.29.1"
windows_2019_current_docker_version = "19.03.1"
windows_2019_current_agent_version = "1.29.1"

# AMI names
al2_ami_name = 'amzn2-ami-ecs-hvm-2.0.' + al2_datecode + '-x86_64-ebs'
al2arm_ami_name = 'amzn2-ami-ecs-hvm-2.0.' + al2arm_datecode + '-arm64-ebs'
al2gpu_ami_name = 'amzn2-ami-ecs-gpu-hvm-2.0.' + al2gpu_datecode + '-x86_64-ebs'
linux_ami_name = 'amzn-ami-' + linux_datecode + '-amazon-ecs-optimized'
windows_2016_ami_name = 'Windows_Server-2016-English-Full-ECS_Optimized-' + windows_2016_datecode
windows_2019_ami_name = 'Windows_Server-2019-English-Full-ECS_Optimized-' + windows_2019_datecode

username = getpass.getuser()

ami_entities = dict()

print("Running script as " + username + "...\n")

boto3_session = boto3.Session(profile_name='admin')
boto3_s3_resource = boto3_session.resource('s3')

global_regions = OrderedDict([
    ("CMH", "us-east-2"),
    ("IAD", "us-east-1"),
    ("SFO", "us-west-1"),
    ("PDX", "us-west-2"),
    ("HKG", "ap-east-1"),
    ("NRT", "ap-northeast-1"),
    ("ICN", "ap-northeast-2"),
    ("SIN", "ap-southeast-1"),
    ("SYD", "ap-southeast-2"),
    ("BOM", "ap-south-1"),
    ("YUL", "ca-central-1"),
    ("FRA", "eu-central-1"),
    ("ARN", "eu-north-1"),
    ("DUB", "eu-west-1"),
    ("LHR", "eu-west-2"),
    ("CDG", "eu-west-3"),
    ("BAH", "me-south-1"),
    ("GRU", "sa-east-1")
    ])
    
arm_global_regions = OrderedDict([
    ("IAD", "us-east-1"),
    ("CMH", "us-east-2"),
    #("SFO", "us-west-1"),
    ("PDX", "us-west-2"),
    #("YUL", "ca-central-1"),
    #("ARN", "eu-north-1"),
    ("DUB", "eu-west-1"),
    #("LHR", "eu-west-2"),
    #("CDG", "eu-west-3"),
    ("FRA", "eu-central-1"),
    #("HKG", "ap-east-1"),
    ("NRT", "ap-northeast-1"),
    #("ICN", "ap-northeast-2"),
    #("SIN", "ap-southeast-1"),
    ("SYD", "ap-southeast-2"),
    ("BOM", "ap-south-1")
    #("GRU", "sa-east-1")
    ])

gov_regions = OrderedDict([
    ("OSU", "us-gov-east-1"),
    ("PDT", "us-gov-west-1")
    ])
    
cn_regions = OrderedDict([
    ("BJS", "cn-north-1"),
    ("ZHY", "cn-northwest-1")
    ])

global xml
xml = "<!-- DO NOT MANUALLY EDIT THIS FILE!!! -->\n<!-- THIS FILE IS AUTO-GENERATED BY tools/get-ecs-amis.py -->\n<!-- ANY MANUAL CHANGES TO THIS FILE WILL BE OVERWRITTEN!!! -->\n\n"

def get_ami(client, ami_name):
    # Try to get AMI ID
    # If that fails for credential reasons, set Images to an empty list
    # then the print_amis() function will set the ID to
    # 'UNKNOWN_AMI_ID_MANUAL_UPDATE_REQUIRED'
    try:
        ami = client.describe_images(
            Owners=[
                'amazon',
            ],
            Filters=[
                {
                    'Name': 'name',
                    'Values': [
                        ami_name
                    ]
                }
            ]
        )
    except:
        ami = {'Images': []}   
    return ami
    
def print_amis(profile_name, regions, ami_name):
    
    global xml
    
    
    
    for key, value in regions.items():
        
        if value == 'ap-east-1':
            session = botocore.session.Session(profile='hkg')
        elif value == 'me-south-1':
            session = botocore.session.Session(profile='bah')
        else:
            session = botocore.session.Session(profile=profile_name)
        client = session.create_client('ec2', region_name=value)
        ami = get_ami(client, ami_name)
    
        if len(ami["Images"]) != 1:
            ami_id = 'UNKNOWN_AMI_ID_MANUAL_UPDATE_REQUIRED'
            print("Error: did not get 1 AMI result.")
            print("Profile name: " + profile_name)
            print("AMI result: ")
            print(ami["Images"])
        else:
            ami_id = ami["Images"][0]["ImageId"]
        
        if ami_name == al2_ami_name:
            entity_prefix = 'al2-ecs-optimized-ami-id-'
        if ami_name == al2arm_ami_name:
            entity_prefix = 'al2-arm64-ecs-optimized-ami-id-'
        if ami_name == al2gpu_ami_name:
            entity_prefix = 'gpu-optimized-ami-id-'
        if ami_name == linux_ami_name:
            entity_prefix = 'ecs-optimized-ami-id-'
        if ami_name == windows_2016_ami_name:
            entity_prefix = 'ecs-optimized-windows-2016-ami-id-'
        if ami_name == windows_2019_ami_name:
            entity_prefix = 'ecs-optimized-windows-2019-ami-id-'
            
        key_string = "<!-- " + key + " -->\n"
        entity_string = "<!ENTITY " + entity_prefix + value + " '" + ami_id + "'>\n"
        print(key_string + entity_string)
        ami_entities.update({key_string:entity_string})

def sort_and_append_entities():
    
    global xml
    
    sorted_entities = sorted(ami_entities.items(), key=operator.itemgetter(1))
    for item in sorted_entities:
        xml += str(item[0]) + item[1]

def run_linux_ami(profile_name, region, ami_name, instance_type):
    
    print("    --> Launching " + instance_type + " instance with " + ami_name + "...")
    
    session = botocore.session.Session(profile=profile_name)
    client = session.create_client('ec2', region_name=region)
    with open('get-ecs-ami-helper-user-data.sh', 'r') as user_data_file:
        ecs_ami_helper_user_data=user_data_file.read()
    ecs_ami_helper_user_data = ecs_ami_helper_user_data.replace('USERNAME_PLACEHOLDER', username)
    userdata = ecs_ami_helper_user_data.encode()
    ami = get_ami(client, ami_name)
    ami_id = ami["Images"][0]["ImageId"]
    ec2_instance = client.run_instances(
        ImageId = ami_id,
        InstanceType = instance_type,
        KeyName = 'id_rsa',
        IamInstanceProfile = {
                'Name': 'EC2-Admin-Role'
            },
        UserData = userdata,
        MaxCount = 1,
        MinCount = 1,
        TagSpecifications=[
                {
                    'ResourceType': 'instance',
                    'Tags': [
                        {
                            'Key': 'Name',
                            'Value': 'ECS AMI Helper Instance'
                        },
                    ]
                },
            ]
    )

def write_new_row(file_name, datecode, agent_version, docker_version, ecs_init_version, nvidia_version = None):
    if nvidia_version is not None:
        new_row = '''        <tbody>
            <row>
                <entry><guilabel>''' + datecode + '''</guilabel></entry>
                <entry><code>''' + agent_version + '''</code></entry>
                <entry><code>''' + docker_version + '''</code></entry>
                <entry><code>''' + ecs_init_version + '''</code></entry>
                <entry><code>''' + nvidia_version + '''</code></entry>
            </row>'''
    else:
        new_row = '''        <tbody>
            <row>
                <entry><guilabel>''' + datecode + '''</guilabel></entry>
                <entry><code>''' + agent_version + '''</code></entry>
                <entry><code>''' + docker_version + '''</code></entry>
                <entry><code>''' + ecs_init_version + '''</code></entry>
            </row>'''
                
    with open(file_name, 'r') as file :
      filedata = file.read()
    
    if datecode not in filedata:
        filedata = filedata.replace('        <tbody>', new_row)

    with open(file_name, 'w') as file:
      file.write(filedata)

def get_entity_value(entity_name, entity_file_name = '../amis.ent'):
    with open(entity_file_name, 'r') as entity_file:
        for line in entity_file:
            if " " + entity_name + " " in line:
                 entity_array = re.findall('"([^"]*)"', line)
                 return entity_array[0]
                 
print("Launching instances with new AMIs to scrape console output...\n")
    
run_linux_ami('admin', 'us-west-2', linux_ami_name, 't2.large')
run_linux_ami('admin', 'us-west-2', al2_ami_name, 't2.large')
run_linux_ami('admin', 'us-west-2', al2arm_ami_name, 'a1.large')
run_linux_ami('admin', 'us-west-2', al2gpu_ami_name, 'p3.2xlarge')

print("\nWaiting 90 seconds for new AMI console output upload to S3...\n")
time.sleep(90)

# Fetch and print ecs-ami-info-file
al1_console_output = boto3_s3_resource.Object(username + '-ecs-ami-info', linux_ami_name).get()['Body'].read().decode('unicode_escape')
al2_console_output = boto3_s3_resource.Object(username + '-ecs-ami-info', al2_ami_name).get()['Body'].read().decode('unicode_escape')
al2arm_console_output = boto3_s3_resource.Object(username + '-ecs-ami-info', al2arm_ami_name).get()['Body'].read().decode('unicode_escape')
al2gpu_console_output = boto3_s3_resource.Object(username + '-ecs-ami-info', al2gpu_ami_name).get()['Body'].read().decode('unicode_escape')

# Start printing AL2 AMIs
print("\nFetching AL2 AMI IDs for " + al2_ami_name + "...\n")
xml += "<!-- AL2 ECS-optimized AMI IDs -->\n"
xml += "<!ENTITY al2-ecs-optimized-ami-name '" + al2_ami_name + "'>\n"

# Get global AL2 AMIs  
print_amis('admin', global_regions, al2_ami_name)

# Get GovCloud AL2 AMIs        
print_amis('govcloud', gov_regions, al2_ami_name)

# Get China AL2 AMIs
print_amis('bjs-ec2-read-only', cn_regions, al2_ami_name)

sort_and_append_entities()
ami_entities.clear()
xml += "\n" + al2_console_output

# Start printing AL2 ARM AMIs
print("\nFetching AL2 ARM AMI IDs for " + al2arm_ami_name + "...\n")  
xml += "\n<!-- AL2 arm64 ECS-optimized AMI IDs -->\n"
xml += "<!ENTITY al2-arm64-ecs-optimized-ami-name '" + al2arm_ami_name + "'>\n"

# Get global AL2 ARM AMIs        
print_amis('admin', arm_global_regions, al2arm_ami_name)

# Get GovCloud AL2 ARM AMIs        
# print_amis('govcloud', gov_regions, al2arm_ami_name)

# Get China AL2 ARM AMIs
# print_amis('bjs-ec2-read-only', cn_regions, al2arm_ami_name)

sort_and_append_entities()
ami_entities.clear()
xml += "\n" + al2arm_console_output

# Start printing AL2 GPU AMIs
print("\nFetching AL2 GPU AMI IDs for " + al2gpu_ami_name + "...\n")  
xml += "\n<!-- ECS GPU-optimized AMI IDs -->\n"
xml += "<!ENTITY gpu-optimized-ami-name '" + al2gpu_ami_name + "'>\n"

# Get global AL2 GPU AMIs        
print_amis('admin', global_regions, al2gpu_ami_name)

# Get GovCloud AL2 GPU AMIs        
print_amis('govcloud', gov_regions, al2gpu_ami_name)

# Get China AL2 GPU AMIs
print_amis('bjs-ec2-read-only', cn_regions, al2gpu_ami_name)

sort_and_append_entities()
ami_entities.clear()
xml += "\n" + al2gpu_console_output

# Start printing AL1 AMIs
print("\nFetching AL1 AMI IDs for " + linux_ami_name + "...\n") 
xml += "\n<!-- ECS-optimized AMI IDs -->\n"
xml += "<!ENTITY ecs-optimized-ami-name '" + linux_ami_name + "'>\n"

# Get global AL1 AMIs        
print_amis('admin', global_regions, linux_ami_name)

# Get GovCloud AL1 AMIs        
print_amis('govcloud', gov_regions, linux_ami_name)

# Get China AL1 AMIs
print_amis('bjs-ec2-read-only', cn_regions, linux_ami_name)

sort_and_append_entities()
ami_entities.clear()
xml += "\n" + al1_console_output

# Start printing Windows 2016 AMIs
print("\nFetching Windows AMI IDs for " + windows_2016_ami_name + "...\n") 
xml += "\n<!-- ECS-optimized Windows 2016 AMI IDs -->\n"
xml += "<!ENTITY ecs-optimized-windows-2016-ami-name '" + windows_2016_ami_name + "'>\n"

# Get global Windows 2016 AMIs
print_amis('admin', global_regions, windows_2016_ami_name)

# Get China Windows 2016 AMIs
print_amis('bjs-ec2-read-only', cn_regions, windows_2016_ami_name)

# Get GovCloud Windows 2016 AMIs
print_amis('govcloud', gov_regions, windows_2016_ami_name)

sort_and_append_entities()
ami_entities.clear()

xml += "\n"


xml += "<!-- $ Windows 2016 versions -->\n"
xml += '<!ENTITY windows-2016-current-docker-version "' + windows_2016_current_docker_version + '" >\n'
xml += "<!-- Get-ECSAgentCachedVersion -->\n"
xml += '<!ENTITY windows-2016-ECS_agent_current_version "' + windows_2016_current_agent_version + '" >\n'


# Start printing Windows 2019 AMIs
print("\nFetching Windows AMI IDs for " + windows_2019_ami_name + "...\n") 
xml += "\n<!-- ECS-optimized Windows 2019 AMI IDs -->\n"
xml += "<!ENTITY ecs-optimized-windows-2019-ami-name '" + windows_2019_ami_name + "'>\n"

# Get global Windows 2019 AMIs
print_amis('admin', global_regions, windows_2019_ami_name)

# Get China Windows 2019 AMIs
print_amis('bjs-ec2-read-only', cn_regions, windows_2019_ami_name)

# Get GovCloud Windows 2019 AMIs
print_amis('govcloud', gov_regions, windows_2019_ami_name)

sort_and_append_entities()
ami_entities.clear()

xml += "\n<!-- $ Windows 2019 versions -->\n"
xml += '<!ENTITY windows-2019-current-docker-version "' + windows_2019_current_docker_version + '" >\n'
xml += "<!-- Get-ECSAgentCachedVersion -->\n"
xml += '<!ENTITY windows-2019-ECS_agent_current_version "' + windows_2019_current_agent_version + '" >\n'

print(al1_console_output + "\n" + al2_console_output + "\n" + al2arm_console_output + "\n" + al2gpu_console_output)

script_dir = os.path.dirname(__file__)
relative_file_path = "../amis.ent"
abs_file_path = os.path.join(script_dir, relative_file_path)

# Write entity file
file = open(abs_file_path,"w")
file.write(xml)
file.close()

# Scrape entity values from entity file
al1_agent_version = get_entity_value('ECS_agent_current_version')
al1_docker_version = get_entity_value('current-ecs-ami-docker-version')
al1_ecs_init_version = get_entity_value('current-ecs-init-version')

al2_agent_version = get_entity_value('al2-ECS_agent_current_version')
al2_docker_version = get_entity_value('al2-current-ecs-ami-docker-version')
al2_ecs_init_version = get_entity_value('al2-current-ecs-init-version')

al2arm_agent_version = get_entity_value('al2-arm64-ECS_agent_current_version')
al2arm_docker_version = get_entity_value('al2-arm64-current-ecs-ami-docker-version')
al2arm_ecs_init_version = get_entity_value('al2-arm64-current-ecs-init-version')

al2gpu_agent_version = get_entity_value('gpu-ECS_agent_current_version')
al2gpu_docker_version = get_entity_value('gpu-current-ecs-ami-docker-version')
al2gpu_ecs_init_version = get_entity_value('gpu-current-ecs-init-version')
al2gpu_nvidia_version = get_entity_value('gpu-nvidia-driver-version')

# Write new AMI table row for AL1
write_new_row('../ecs-ami-agent-version-table.xml', linux_datecode, al1_agent_version, al1_docker_version, al1_ecs_init_version)

# Write new AMI table row for AL2
write_new_row('../al2-ami-agent-version-table.xml', al2_datecode, al2_agent_version, al2_docker_version, al2_ecs_init_version)

# Write new AMI table row for AL2 ARM
write_new_row('../al2-arm64-ami-agent-version-table.xml', al2arm_datecode, al2arm_agent_version, al2arm_docker_version, al2arm_ecs_init_version)

# Write new AMI table row for AL2 GPU
write_new_row('../gpu-ami-agent-version-table.xml', al2gpu_datecode, al2gpu_agent_version, al2gpu_docker_version, al2gpu_ecs_init_version, al2gpu_nvidia_version)
