    public static void createNewPipeline(CodePipelineClient pipelineClient, String name,  String roleArn, String s3Bucket,  String s3OuputBucket ) {

        try {
            ActionTypeId actionTypeSource = ActionTypeId.builder()
                    .category("Source")
                    .owner("AWS")
                    .provider("S3")
                    .version("1")
                    .build();

            // Set Config information
            Map<String,String> mapConfig = new HashMap<String,String>();
            mapConfig.put("PollForSourceChanges","false");
            mapConfig.put("S3Bucket",s3Bucket);
            mapConfig.put("S3ObjectKey","SampleApp_Windows.zip");

            OutputArtifact outputArtifact = OutputArtifact.builder()
                    .name("SourceArtifact")
                    .build();

            ActionDeclaration actionDeclarationSource = ActionDeclaration.builder()
                    .actionTypeId(actionTypeSource)
                    .region("us-east-1")
                    .configuration(mapConfig)
                    .runOrder(1)
                    .outputArtifacts(outputArtifact)
                    .name("Source")
                    .build();

            // Set Config information
            Map<String,String> mapConfig1 = new HashMap<String,String>();
            mapConfig1.put("BucketName",s3OuputBucket);
            mapConfig1.put("ObjectKey","SampleApp.zip");
            mapConfig1.put("Extract","false");

            ActionTypeId actionTypeDeploy = ActionTypeId.builder()
                    .category("Deploy")
                    .owner("AWS")
                    .provider("S3")
                    .version("1")
                    .build();

            InputArtifact inArtifact = InputArtifact.builder()
                    .name("SourceArtifact")
                    .build();

            ActionDeclaration actionDeclarationDeploy = ActionDeclaration.builder()
                    .actionTypeId(actionTypeDeploy)
                    .region("us-east-1")
                    .configuration(mapConfig1)
                    .inputArtifacts(inArtifact)
                    .runOrder(1)
                    .name("Deploy")
                    .build();

            StageDeclaration declaration = StageDeclaration.builder()
                    .actions(actionDeclarationSource)
                    .name("Stage")
                    .build();

            StageDeclaration deploy = StageDeclaration.builder()
                    .actions(actionDeclarationDeploy)
                    .name("Deploy")
                    .build();

            List<StageDeclaration> stages = new ArrayList<>();
            stages.add(declaration);
            stages.add(deploy);

            ArtifactStore store = ArtifactStore.builder()
                    .location(s3Bucket)
                    .type("S3")
                    .build();

            PipelineDeclaration pipelineDeclaration = PipelineDeclaration.builder()
                    .name(name)
                    .artifactStore(store)
                    .roleArn(roleArn)
                    .stages(stages)
                    .build();

            CreatePipelineRequest pipelineRequest = CreatePipelineRequest.builder()
                    .pipeline(pipelineDeclaration)
                    .build();

            CreatePipelineResponse response = pipelineClient.createPipeline(pipelineRequest);
            System.out.println("Pipeline "+response.pipeline().name() +" was successfully created");

        } catch (CodePipelineException e) {
            System.err.println(e.getMessage());
            System.exit(1);
       }
  }
