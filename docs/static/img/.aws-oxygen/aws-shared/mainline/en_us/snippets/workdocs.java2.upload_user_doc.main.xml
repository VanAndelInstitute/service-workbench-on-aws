<programlisting>
    public static void uploadDoc(WorkDocsClient workDocs, String orgId, String userEmail, String docName, String docPath) {

        String docId ;
        String versionId ;
        String uploadUrl ;
        int statusValue = 0;
        Map<String, String> map = getDocInfo(workDocs, orgId, userEmail, docName);
        docId = map.get("doc_id");
        versionId = map.get("version_id");
        uploadUrl = map.get("upload_url");

        statusValue = startDocUpload(uploadUrl, docPath);

        if (statusValue != 200) {
             System.out.println("Error code uploading: " + statusValue);
        } else {
             System.out.println("Success uploading doc " + docName);
        }

        completeUpload(workDocs, docId, versionId);

    }

    private static Map<String, String> getDocInfo(WorkDocsClient workDocs, String orgId, String user, String doc) {

        String folderId = getUserFolder(workDocs, orgId, user);

        InitiateDocumentVersionUploadRequest request = InitiateDocumentVersionUploadRequest.builder()
                .parentFolderId(folderId)
                .name(doc)
                .contentType("application/octet-stream")
                .build();

        InitiateDocumentVersionUploadResponse result = workDocs.initiateDocumentVersionUpload(request);

        UploadMetadata uploadMetadata = result.uploadMetadata();

        Map<String, String> map = new HashMap<String, String>();

        map.put("doc_id", result.metadata().id());
        map.put("version_id", result.metadata().latestVersionMetadata().id());
        map.put("upload_url", uploadMetadata.uploadUrl());

        return map;
    }

    private static String getUserFolder(WorkDocsClient workDocs, String orgId, String user) {
        List<User> wdUsers = new ArrayList<>();

        String marker = null;

        do {
            DescribeUsersResponse result;

            if(marker == null) {
                DescribeUsersRequest request = DescribeUsersRequest.builder()
                        .organizationId(orgId)
                        .query(user)
                        .build();
                result = workDocs.describeUsers(request);
            } else {
                DescribeUsersRequest request = DescribeUsersRequest.builder()
                        .organizationId(orgId)
                        .query(user)
                        .marker(marker)
                        .build();
                result = workDocs.describeUsers(request);
            }

            wdUsers.addAll(result.users());
            marker = result.marker();
        } while (marker != null);

        for (User wdUser : wdUsers) {
            return wdUser.rootFolderId();
        }

        return "";
    }

    private static int startDocUpload(String uploadUrl, String doc) {

        try {

            URL url = new URL(uploadUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoOutput(true);
            connection.setRequestMethod("PUT");

            // Content-Type supplied here should match with the Content-Type set
            // in the InitiateDocumentVersionUpload request.
            connection.setRequestProperty("Content-Type","application/octet-stream");
            connection.setRequestProperty("x-amz-server-side-encryption", "AES256");
            File file = new File(doc);
            FileInputStream fileInputStream = new FileInputStream(file);
            OutputStream outputStream = connection.getOutputStream();
            IOUtils.copy(fileInputStream, outputStream);

            // Very misleading. Getting a 200 only means the call succeeded, not that the copy worked.
            return connection.getResponseCode();  // int where 200 == success

        } catch(WorkDocsException | ProtocolException e) {
            System.out.println(e.getLocalizedMessage());
            System.exit(1);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return -1;
    }

    private static void completeUpload(WorkDocsClient workDocs, String docId, String versionId) {
        UpdateDocumentVersionRequest request = UpdateDocumentVersionRequest.builder()
                .documentId(docId)
                .versionId(versionId)
                .versionStatus(DocumentVersionStatus.ACTIVE)
                .build();
        workDocs.updateDocumentVersion(request);
    }
</programlisting>