<programlisting>
suspend fun createPinpointEndpoint(applicationIdVal: String?): String? {

        val endpointIdVal = UUID.randomUUID().toString()
        println("Endpoint ID: $endpointIdVal")

       val endpointRequestOb = createEndpointRequestData()
       val updateEndpointRequest = UpdateEndpointRequest {
           applicationId = applicationIdVal
           endpointId = endpointIdVal
           endpointRequest = endpointRequestOb
       }

       PinpointClient { region = "us-west-2" }.use { pinpoint ->

         val updateEndpointResponse = pinpoint.updateEndpoint(updateEndpointRequest)
         println("Update Endpoint Response ${updateEndpointResponse.messageBody}")

         val getEndpointRequest = GetEndpointRequest {
            applicationId = applicationIdVal
            endpointId = endpointIdVal
         }

         val endpointResponse = pinpoint.getEndpoint(getEndpointRequest)
         println(endpointResponse.endpointResponse?.address)
         println(endpointResponse.endpointResponse?.channelType)
         println(endpointResponse.endpointResponse?.applicationId)
         println(endpointResponse.endpointResponse?.endpointStatus)
         println(endpointResponse.endpointResponse?.requestId)
         println(endpointResponse.endpointResponse?.user)

         // Return the endpoint Id value.
         return endpointResponse.endpointResponse?.id
        }
     }

    private fun createEndpointRequestData(): EndpointRequest? {

            val favoriteTeams = mutableListOf<String>()
            favoriteTeams.add("Lakers")
            favoriteTeams.add("Warriors")

            val customAttributes = mutableMapOf<String, List<String>>()
            customAttributes["team"] = favoriteTeams

            val demographicOb =  EndpointDemographic {
                appVersion = "1.0"
                make = "apple"
                model = "iPhone"
                modelVersion = "7"
                platform ="ios"
                platformVersion = "10.1.1"
                timezone  = "America/Los_Angeles"
            }

            val locationOb = EndpointLocation {
                city ="Los Angeles"
                country = "US"
                latitude = 34.0
                longitude = -118.2
                postalCode = "90068"
                region ="CA"
            }

            val metricsMap = mutableMapOf<String, Double>()
            metricsMap["health"] = 100.00
            metricsMap["luck"] = 75.00

            val userOb = EndpointUser {
                userId = UUID.randomUUID().toString()
            }

            val df: DateFormat =
                SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'") // Quoted "Z" to indicate UTC, no timezone offset
            val nowAsISO = df.format(Date())

            return EndpointRequest {
                address = UUID.randomUUID().toString()
                attributes = customAttributes
                channelType = ChannelType.Apns
                demographic = demographicOb
                effectiveDate = nowAsISO
                location = locationOb
                metrics = metricsMap
                optOut ="NONE"
                requestId = UUID.randomUUID().toString()
                user = userOb
            }
    }
</programlisting>