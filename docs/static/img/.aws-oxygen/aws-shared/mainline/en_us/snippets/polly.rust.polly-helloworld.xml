<programlisting>
async fn show_voices(client: &Client) -> Result<(), Error> {
    let mut tok: Option<String> = None;
    let mut voices: Vec<Voice> = vec![];

    // Below is an an example of how pagination can be implemented manually.
    loop {
        let mut req = client.describe_voices();

        if let Some(tok) = tok {
            req = req.next_token(tok);
        }

        let resp = req.send().await?;

        for voice in resp.voices().unwrap_or_default() {
            println!(
                "I can speak as: {} in {:?}",
                voice.name().as_ref().unwrap(),
                voice.language_name().as_ref().unwrap()
            );
            voices.push(Voice::clone(voice));
        }

        tok = match &resp.next_token() {
            Some(next) => Some(next.to_string()),
            None => break,
        };
    }

    let neural_voices = voices
        .iter()
        .filter(|voice| {
            voice
                .supported_engines()
                .unwrap_or_default()
                .contains(&Engine::Neural)
        })
        .map(|voice| voice.id().unwrap())
        .collect::<Vec<_>>();

    println!();
    println!("Voices supporting a neural engine: {:?}", neural_voices);
    println!();

    Ok(())
}
</programlisting>