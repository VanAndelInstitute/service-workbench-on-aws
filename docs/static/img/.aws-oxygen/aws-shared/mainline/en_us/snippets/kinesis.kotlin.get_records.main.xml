<programlisting>
suspend fun getStockTrades(streamNameVal: String?) {

    val shardIteratorVal: String
    val shards = mutableListOf<Shard?>()
    var streamRes: DescribeStreamResponse
    val request =  DescribeStreamRequest {
        streamName = streamNameVal
    }
    KinesisClient { region = "us-east-1" }.use { kinesisClient ->
        do {
            streamRes = kinesisClient.describeStream(request)
            shards.add(streamRes.streamDescription?.shards?.get(0))

        } while (streamRes.streamDescription?.hasMoreShards == true)

        val id = shards[0]?.shardId
        val shardIteratorResult = kinesisClient.getShardIterator(GetShardIteratorRequest {
            streamName = streamNameVal
            shardIteratorType = ShardIteratorType.fromValue("TRIM_HORIZON")
            shardId = id
        })
        shardIteratorVal = shardIteratorResult.shardIterator.toString()

        val recRequest =  GetRecordsRequest {
        shardIterator = shardIteratorVal
        limit = 1000
        }

        // Continuously read data records from shard.
        val result = kinesisClient.getRecords(recRequest)
        result.records?.forEach { record ->
            println("Seq No: ${record.sequenceNumber} - ${record.data?.let { String(it) }}")
        }
    }
}
</programlisting>