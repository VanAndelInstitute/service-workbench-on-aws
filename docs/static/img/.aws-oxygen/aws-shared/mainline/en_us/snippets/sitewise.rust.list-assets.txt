async fn list_assets(
    client: &Client,
    filter: ListAssetsFilter,
    asset_model_id: Option<String>,
) -> Result<(), Error> {
    let resp = client
        .list_assets()
        .filter(filter)
        .set_asset_model_id(asset_model_id)
        .send()
        .await?;

    println!("Assets:");

    for asset in resp.asset_summaries.unwrap() {
        println!("  ID:  {}", asset.id.as_deref().unwrap_or_default());
        println!("  ARN:  {}", asset.arn.as_deref().unwrap_or_default());
        println!("  Name:   {}", asset.name.as_deref().unwrap_or_default());
        println!(
            "  Asset Model ID:   {}",
            asset.asset_model_id.as_deref().unwrap_or_default()
        );
        println!(
            "  Creation Date:   {}",
            asset.creation_date.unwrap().to_chrono_utc()
        );
        println!(
            "  Last Update Date:   {}",
            asset.last_update_date.unwrap().to_chrono_utc()
        );
        println!(
            "  Current Status:   {}",
            asset.status.unwrap().state.unwrap().as_str()
        );

        println!("  Assets Hierarchies:");

        for hierarchy in asset.hierarchies.unwrap() {
            println!(
                "    Hierarchy ID:   {}",
                hierarchy.id.as_deref().unwrap_or_default()
            );
            println!(
                "    Hierarchy Name:   {}",
                hierarchy.name.as_deref().unwrap_or_default()
            );
        }

        println!();
    }

    println!();

    Ok(())
}
