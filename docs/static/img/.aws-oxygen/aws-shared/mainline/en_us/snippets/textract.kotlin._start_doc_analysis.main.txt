suspend fun startDocAnalysisS3(bucketName: String?, docName: String?) {

    val myList = mutableListOf<FeatureType>()
    myList.add(FeatureType.Tables)
    myList.add(FeatureType.Forms)

    val s3ObjectOb = S3Object {
        bucket = bucketName
        name = docName
    }

    val location = DocumentLocation {
        s3Object = s3ObjectOb
    }

    val documentAnalysisRequest = StartDocumentAnalysisRequest {
        documentLocation = location
        featureTypes = myList
    }

    TextractClient { region = "us-west-2" }.use { textractClient ->
        val response = textractClient.startDocumentAnalysis(documentAnalysisRequest)

        // Get the job ID.
        val jobId = response.jobId
        val result = getJobResults(textractClient, jobId)
        println("The status of the job is: $result")
    }
}

private suspend fun getJobResults(textractClient: TextractClient, jobIdVal: String?): String {


    var finished = false
    var index = 0
    var status = ""

    while (!finished) {

        val analysisRequest = GetDocumentAnalysisRequest {
            jobId = jobIdVal
            maxResults = 1000
        }
        val response = textractClient.getDocumentAnalysis(analysisRequest)
        status = response.jobStatus.toString()

        if (status.compareTo("SUCCEEDED") == 0) finished = true else {
            println("$index status is: $status")
            delay(1000)
        }
        index ++
    }
    return status
}
