<programlisting>
suspend fun addStockTradeData(streamName: String?) {

    try {
        val recordList = mutableListOf<Record> ()

        // Repeatedly send stock trades with a 100 milliseconds wait in between.
        val stockTradeGenerator = StockTradeGenerator()
        val index = 100

        // Populate the list with StockTrade data.
        for (x in 0 until index) {
            val trade = stockTradeGenerator.randomTrade
            val bytes = trade.toJsonAsBytes()
            val myRecord = Record {
                 data = bytes
            }

            println("Adding trade: $trade")
            recordList.add(myRecord)
            delay(100)
        }
        val request = PutRecordBatchRequest {
             deliveryStreamName = streamName
             records = recordList
        }

       FirehoseClient { region = "us-west-2" }.use { firehoseClient ->
        val recordResponse = firehoseClient.putRecordBatch(request)
        println("The number of records added is ${recordResponse.requestResponses?.size}")

       }
    } catch (e: InterruptedException) {
        println(e.localizedMessage)
        exitProcess(0)
    }
}
</programlisting>