suspend fun submitAthenaQuery( queryStringVal:String, databaseVal:String, outputLocationVal:String  ): String? {

        // The QueryExecutionContext allows us to set the database.
        val queryExecutionContextOb = QueryExecutionContext {
            database = databaseVal
        }

        // The result configuration specifies where the results of the query should go.
        val resultConfigurationOb = ResultConfiguration {
            outputLocation =outputLocationVal
        }

        val request = StartQueryExecutionRequest {
            queryString = queryStringVal
            queryExecutionContext = queryExecutionContextOb
            resultConfiguration = resultConfigurationOb
        }

        AthenaClient { region = "us-west-2" }.use { athenaClient ->
            val response = athenaClient.startQueryExecution(request)
            return response.queryExecutionId
        }
    }

// Wait for an Amazon Athena query to complete, fail or to be cancelled.
suspend fun waitForQueryToComplete(queryExecutionIdVal: String?) {

    var isQueryStillRunning = true
    while (isQueryStillRunning) {


        val request = GetQueryExecutionRequest {
            queryExecutionId = queryExecutionIdVal
        }

        AthenaClient { region = "us-west-2" }.use { athenaClient ->

            val response = athenaClient.getQueryExecution(request)
            val queryState = response.queryExecution?.status?.state.toString()
            if (queryState == QueryExecutionState.Succeeded.toString()) {
                isQueryStillRunning = false
            } else {
                // Sleep an amount of time before retrying again
                delay(1000)
            }
            println("The current status is: $queryState")
        }
    }
}

// This code retrieves the results of a query.
suspend fun processResultRows(queryExecutionIdVal: String?) {

    val request = GetQueryResultsRequest {
        queryExecutionId = queryExecutionIdVal
    }
    AthenaClient { region = "us-west-2" }.use { athenaClient ->
        val getQueryResultsResults = athenaClient.getQueryResults(request)
        val results = getQueryResultsResults.resultSet
        for (result in listOf(results)) {
            val columnInfoList = result?.resultSetMetadata?.columnInfo
            val response = result?.rows
            if (response != null) {
                if (columnInfoList != null) {
                    processRow(response)
                }
            }
        }
    }
}


private fun processRow(row: List<Row>) {
    for (myRow in row) {
        val allData = myRow.data
        if (allData != null) {
            for (data in allData) {
                println("The value of the column is " + data.varCharValue)
            }
        }
    }
}
