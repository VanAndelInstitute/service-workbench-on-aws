<programlisting>
suspend fun compareTwoFaces(similarityThresholdVal: Float, sourceImageVal: String, targetImageVal: String) {

           val sourceBytes = (File(sourceImageVal).readBytes())
           val targetBytes = (File(targetImageVal).readBytes())

            // Create an Image object for the source image.
            val souImage = Image {
                bytes = sourceBytes
            }

            val tarImage = Image {
                bytes = targetBytes
            }

            val facesRequest = CompareFacesRequest {
                sourceImage = souImage
                targetImage = tarImage
                similarityThreshold = similarityThresholdVal
            }

            RekognitionClient { region = "us-east-1" }.use { rekClient ->

              val compareFacesResult = rekClient.compareFaces(facesRequest)
              val faceDetails = compareFacesResult.faceMatches

              if (faceDetails != null) {
                for (match: CompareFacesMatch in faceDetails) {
                    val face = match.face
                    val position = face?.boundingBox
                    if (position != null)
                        println("Face at ${position.left.toString()} ${position.top} matches with ${face.confidence.toString()} % confidence.")
                }
              }

              val uncompared = compareFacesResult.unmatchedFaces
              if (uncompared != null)
                println("There was ${uncompared.size} face(s) that did not match")

               println("Source image rotation: ${compareFacesResult.sourceImageOrientationCorrection}")
               println("target image rotation: ${compareFacesResult.targetImageOrientationCorrection}")
           }
   }
</programlisting>