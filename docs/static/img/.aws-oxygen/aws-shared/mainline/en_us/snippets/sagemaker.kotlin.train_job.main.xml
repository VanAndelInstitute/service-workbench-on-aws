<programlisting>
suspend fun trainJob(
    s3UriData: String?,
    s3UriVal:String,
    trainingJobNameVal: String?,
    roleArnVal: String?,
    s3OutputPathVal: String?,
    channelNameVal: String?,
    trainingImageVal: String?
) {

        val s3DataSourceOb = S3DataSource {
            s3Uri = s3UriData
            s3DataType = S3DataType.S3Prefix
            s3DataDistributionType = S3DataDistribution.FullyReplicated
        }

        val dataSourceOb = DataSource {
            s3DataSource = s3DataSourceOb
        }

        val channel = Channel {
            channelName = channelNameVal
            contentType = "csv"
            dataSource = dataSourceOb
        }

        val myChannel = mutableListOf<Any>()
        myChannel.add(channel)

        val resourceConfigOb = ResourceConfig {
            instanceType = TrainingInstanceType.MlC5_2_Xlarge
            instanceCount = 10
            volumeSizeInGb = 1
        }

        val checkpointConfigOb = CheckpointConfig {
            s3Uri = s3UriVal
        }

        val outputDataConfigOb = OutputDataConfig {
            s3OutputPath = s3OutputPathVal
        }

        val stoppingConditionOb = StoppingCondition {
            maxRuntimeInSeconds = 1200
        }

        val algorithmSpecificationOb = AlgorithmSpecification {
            trainingImage = trainingImageVal
            trainingInputMode = TrainingInputMode.File
        }

        // Set hyper parameters
        val hyperParametersOb = mutableMapOf<String, String>()
        hyperParametersOb["num_round"] = "100"
        hyperParametersOb["eta"] = "0.2"
        hyperParametersOb["gamma"] = "4"
        hyperParametersOb["max_depth"] = "5"
        hyperParametersOb["min_child_weight"] = "6"
        hyperParametersOb["objective"] = "binary:logistic"
        hyperParametersOb["silent"] = "0"
        hyperParametersOb["subsample"] = "0.8"

        val request = CreateTrainingJobRequest{
            trainingJobName = trainingJobNameVal
            algorithmSpecification = algorithmSpecificationOb
            roleArn = roleArnVal
            resourceConfig = resourceConfigOb
            checkpointConfig = checkpointConfigOb
            inputDataConfig = listOf(channel)
            outputDataConfig = outputDataConfigOb
            stoppingCondition = stoppingConditionOb
            hyperParameters = hyperParametersOb
            }

        SageMakerClient { region = "us-west-2" }.use { sageMakerClient ->
          val response = sageMakerClient.createTrainingJob(request)
          println("The Amazon Resource Name (ARN) of the training job is ${response.trainingJobArn}")
        }
}
</programlisting>