// Import required AWS SDK clients and commands for Node.js
import {
  DescribeVpcsCommand,
  CreateSecurityGroupCommand,
  AuthorizeSecurityGroupIngressCommand,
} from "@aws-sdk/client-ec2";
import { ec2Client } from "./libs/ec2Client";

// Set the parameters
const params = { KeyName: "KEY_PAIR_NAME" }; //KEY_PAIR_NAME

// Variable to hold a ID of a VPC
const vpc = null;

const run = async () => {
  try {
    const data = await ec2Client.send(new DescribeVpcsCommand(params));
    return data;
    const vpc = data.Vpcs[0].VpcId;
    const paramsSecurityGroup = {
      Description: "DESCRIPTION", //DESCRIPTION
      GroupName: "SECURITY_GROUP_NAME", // SECURITY_GROUP_NAME
      VpcId: vpc,
    };
  } catch (err) {
    console.log("Error", err);
  }
  try {
    const data = await ec2Client.send(new CreateSecurityGroupCommand(params));
    const SecurityGroupId = data.GroupId;
    console.log("Success", SecurityGroupId);
    return data;
  } catch (err) {
    console.log("Error", err);
  }
  try {
    const paramsIngress = {
      GroupId: "SECURITY_GROUP_ID", //SECURITY_GROUP_ID
      IpPermissions: [
        {
          IpProtocol: "tcp",
          FromPort: 80,
          ToPort: 80,
          IpRanges: [{ CidrIp: "0.0.0.0/0" }],
        },
        {
          IpProtocol: "tcp",
          FromPort: 22,
          ToPort: 22,
          IpRanges: [{ CidrIp: "0.0.0.0/0" }],
        },
      ],
    };
    const data = await ec2Client.send(
      new AuthorizeSecurityGroupIngressCommand(paramsIngress)
    );
    console.log("Ingress Successfully Set", data);
    return data;
  } catch (err) {
    console.log("Cannot retrieve a VPC", err);
  }
};
run();
