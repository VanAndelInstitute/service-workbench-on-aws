    svc := cloudtrail.New(sess)

    input := &cloudtrail.LookupEventsInput{EndTime: aws.Time(time.Now())}

    resp, err := svc.LookupEvents(input)
    if err != nil {
        fmt.Println("Got error calling CreateTrail:")
        fmt.Println(err.Error())
        return
    }

    fmt.Println("Found", len(resp.Events), "events before now")
    fmt.Println("")

    for _, event := range resp.Events {
        fmt.Println("Event:")
        fmt.Println(aws.StringValue(event.CloudTrailEvent))
        fmt.Println("")
        fmt.Println("Name    ", aws.StringValue(event.EventName))
        fmt.Println("ID:     ", aws.StringValue(event.EventId))
        fmt.Println("Time:   ", aws.TimeValue(event.EventTime))
        fmt.Println("User:   ", aws.StringValue(event.Username))

        fmt.Println("Resources:")

        for _, resource := range event.Resources {
            fmt.Println("  Name:", aws.StringValue(resource.ResourceName))
            fmt.Println("  Type:", aws.StringValue(resource.ResourceType))
        }

        fmt.Println("")
