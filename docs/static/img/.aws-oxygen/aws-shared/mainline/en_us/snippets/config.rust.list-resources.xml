<programlisting>
async fn show_resources(verbose: bool, client: &Client) -> Result<(), Error> {
    for value in ResourceType::values() {
        let parsed = ResourceType::from(*value);

        let resp = client
            .list_discovered_resources()
            .resource_type(parsed)
            .send()
            .await?;

        let resources = resp.resource_identifiers().unwrap_or_default();

        if !resources.is_empty() || verbose {
            println!();
            println!("Resources of type {}:", value);
        }

        for resource in resources {
            println!(
                "  Resource ID: {}",
                resource.resource_id().as_deref().unwrap_or_default()
            );
        }
    }

    println!();

    Ok(())
}
</programlisting>