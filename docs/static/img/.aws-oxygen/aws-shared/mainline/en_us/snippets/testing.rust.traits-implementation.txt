#[derive(Clone, Debug)]
pub struct S3ListObjects {
    s3: s3::Client,
}

impl S3ListObjects {
    pub fn new(s3: s3::Client) -> Self {
        Self { s3 }
    }
}

#[async_trait]
impl ListObjects for S3ListObjects {
    async fn list_objects(
        &self,
        bucket: &str,
        prefix: &str,
        continuation_token: Option<String>,
    ) -> Result<ListObjectsResult, Box<dyn Error + Send + Sync + 'static>> {
        let response = self
            .s3
            .list_objects_v2()
            .bucket(bucket)
            .prefix(prefix)
            .set_continuation_token(continuation_token)
            .send()
            .await?;
        Ok(ListObjectsResult {
            objects: response.contents().unwrap_or_default().to_vec(),
            continuation_token: response.continuation_token().map(|t| t.to_string()),
            has_more: response.is_truncated(),
        })
    }
}
