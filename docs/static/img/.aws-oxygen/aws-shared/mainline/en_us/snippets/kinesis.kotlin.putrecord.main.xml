<programlisting>
suspend fun setStockData(streamName: String) {

        // Repeatedly send stock trades with a 100 milliseconds wait in between.
        val stockTradeGenerator = StockTradeGenerator()

        // Put in 50 Records for this example.
        val index = 50
        for (x in 0 until index) {
            val trade: StockTrade = stockTradeGenerator.getSampleData()
            sendStockTrade(trade, streamName)
            delay(100)
        }
}

private suspend fun sendStockTrade( trade: StockTrade, streamNameVal: String ) {

    val bytes = trade.toJsonAsBytes()

    // The bytes could be null if there is an issue with the JSON serialization by the Jackson JSON library.
    if (bytes == null) {
        println("Could not get JSON bytes for stock trade")
        return
    }
    println("Putting trade: $trade")
    val request = PutRecordRequest {
        partitionKey = trade.getTheTickerSymbol() // We use the ticker symbol as the partition key, explained in the Supplemental Information section below.
        streamName = streamNameVal
        data = bytes
    }

    KinesisClient { region = "us-east-1" }.use { kinesisClient ->
        kinesisClient.putRecord(request)
   }
}

suspend fun validateStream(streamNameVal: String) {

    val request = DescribeStreamRequest {
        streamName = streamNameVal
    }

    KinesisClient { region = "us-east-1" }.use { kinesisClient ->
        val describeStreamResponse = kinesisClient.describeStream(request)

        if (describeStreamResponse.streamDescription?.streamStatus.toString() != "ACTIVE") {
            System.err.println("Stream $streamNameVal is not active. Please wait a few moments and try again.")
            exitProcess(1)
        }
    }
 }
</programlisting>