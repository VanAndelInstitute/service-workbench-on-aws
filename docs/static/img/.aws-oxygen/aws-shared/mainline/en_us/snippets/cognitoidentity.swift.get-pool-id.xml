<programlisting>
    func getIdentityPoolID(name: String) async throws -> String? {
        var token: String? = nil
        
        // Iterate over the identity pools until a match is found.
        repeat {
            /// `token` is a value returned by `ListIdentityPools()` if the returned list
            /// of identity pools is only a partial list. You use the `token` to tell Cognito that
            /// you want to continue where you left off previously; specifying `nil` or not providing
            /// it means "start at the beginning."
            
            let listPoolsInput = ListIdentityPoolsInput(maxResults: 25, nextToken: token)
            
            /// Read pages of identity pools from Cognito until one is found
            /// whose name matches the one specified in the `name` parameter.
            /// Return the matching pool's ID. Each time we ask for the next
            /// page of identity pools, we pass in the token given by the
            /// previous page.
            
            do {
                let output = try await cognitoIdentityClient.listIdentityPools(input: listPoolsInput)

                if let identityPools = output.identityPools {
                    for pool in identityPools {
                        if pool.identityPoolName == name {
                            return pool.identityPoolId!
                        }
                    }
                }
                
                token = output.nextToken
            } catch {
                print("ERROR: ", dump(error, name: "Trying to get list of identity pools"))
            }
        } while token != nil
        
        return nil
    }
</programlisting>