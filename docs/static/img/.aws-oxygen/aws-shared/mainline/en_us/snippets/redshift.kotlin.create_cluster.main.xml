<programlisting>
suspend fun createCluster(clusterId: String?, masterUsernameVal: String?, masterUserPasswordVal: String?) {

        val clusterRequest = CreateClusterRequest {
            clusterIdentifier = clusterId
            masterUsername = masterUsernameVal // set the user name here
            masterUserPassword = masterUserPasswordVal // set the user password here
            nodeType = "ds2.xlarge"
            publiclyAccessible = true
            numberOfNodes = 2
        }

        RedshiftClient { region = "us-west-2" }.use { redshiftClient ->
          val clusterResponse = redshiftClient.createCluster(clusterRequest)
          println("Created cluster ${clusterResponse.cluster?.clusterIdentifier}")
    }
}

// Waits until the cluster is available.
suspend fun waitForClusterReady( clusterId: String?) {
    var clusterReady = false
    var clusterReadyStr: String
    val sleepTime: Long = 20
    println("Waiting for the cluster to become available.")


    val clustersRequest = DescribeClustersRequest {
            clusterIdentifier = clusterId
     }
    RedshiftClient { region = "us-west-2" }.use { redshiftClient ->
        // Loop until the cluster is ready.
        while (!clusterReady) {
            val clusterResponse = redshiftClient.describeClusters(clustersRequest)
            val clusterList = clusterResponse.clusters

            if (clusterList != null) {
                for (cluster in clusterList) {

                    clusterReadyStr = cluster.clusterStatus.toString()
                    if (clusterReadyStr.contains("available"))
                        clusterReady = true
                    else {
                        print(".")
                        delay(sleepTime * 1000)
                    }
                }
            }
        }
        println("Cluster is available!")
    }
}

suspend fun modifyCluster( clusterId: String?) {
        val modifyClusterRequest = ModifyClusterRequest {
            clusterIdentifier = clusterId
            preferredMaintenanceWindow = "wed:07:30-wed:08:00"
        }

        RedshiftClient { region = "us-west-2" }.use { redshiftClient ->
          val clusterResponse = redshiftClient.modifyCluster(modifyClusterRequest)
          println("The modified cluster was successfully modified and has ${clusterResponse.cluster?.preferredMaintenanceWindow.toString()} as the maintenance window")
    }
}
</programlisting>