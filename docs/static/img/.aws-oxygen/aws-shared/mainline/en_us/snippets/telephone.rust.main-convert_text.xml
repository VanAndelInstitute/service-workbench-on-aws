<programlisting>
async fn convert_text(verbose: bool, client: &aws_sdk_polly::Client, filename: &str) -> String {
    if verbose {
        println!("Opening text file {} to convert to audio", filename);
        println!();
    }

    let content = fs::read_to_string(&filename);

    let resp = client
        .synthesize_speech()
        .output_format(OutputFormat::Mp3)
        .text(content.unwrap())
        .voice_id(VoiceId::Joanna)
        .send();

    // Get MP3 data from response and save it to a file.
    let mut blob = resp
        .await
        .unwrap()
        .audio_stream
        .collect()
        .await
        .expect("failed to read data");

    let parts: Vec<&str> = filename.split('.').collect();
    let out_file = format!("{}{}", String::from(parts[0]), ".mp3");

    let mut file = tokio::fs::File::create(&out_file)
        .await
        .expect("failed to create file");

    file.write_all_buf(&mut blob)
        .await
        .expect("failed to write to file");

    out_file
}
</programlisting>