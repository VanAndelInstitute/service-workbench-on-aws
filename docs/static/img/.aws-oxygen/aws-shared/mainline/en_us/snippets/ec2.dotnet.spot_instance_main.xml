<programlisting>
        /* Creates, cancels, and terminates a spot instance request
         * 
         *   AmazonEC2Client ec2Client is the EC2 client through which the spot instance is manipulated
         *   string spotRequestId is the ID of the spot instance
         *
         * See https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/EC2/MEC2TerminateInstancesTerminateInstancesRequest.html
         */

        // Displays information about the command-line args
        private static void Usage()
        {
            Console.WriteLine("");
            Console.WriteLine("Usage:");
            Console.WriteLine("");
            Console.WriteLine("Ec2SpotCrud.exe AMI [-s SECURITY_GROUP] [-p SPOT_PRICE] [-c INSTANCE_COUNT] [-h]");
            Console.WriteLine("  where:");
            Console.WriteLine("  AMI is the AMI to use. No default value. Cannot be an empty string.");
            Console.WriteLine("  SECURITY_GROUP is the name of a security group. Default is default. Cannot be an empty string.");
            Console.WriteLine("  SPOT_PRICE is the spot price. Default is 0.003. Must be > 0.001.");
            Console.WriteLine("  INSTANCE_COUNT is the number of instances. Default is 1. Must be > 0.");
            Console.WriteLine("  -h displays this message and quits");
            Console.WriteLine();
        }
        
        /* Creates, cancels, and terminates a spot instance request
         * See Usage() for information about the command-line args
         */
        static void Main(string[] args)
        {
            // Values that aren't easy to pass on the command line            
            RegionEndpoint region = RegionEndpoint.USWest2;
            InstanceType instanceType = InstanceType.T1Micro;
            
            // Default values for optional command-line args
            string securityGroupName = "default";
            string spotPrice = "0.003";
            int instanceCount = 1;

            // Placeholder for the only required command-line arg
            string amiId = "";

            // Parse command-line args
            int i = 0;
            while (i < args.Length)
            {
                switch (args[i])
                {
                    case "-s":
                        i++;
                        securityGroupName = args[i];
                        if (securityGroupName == "")
                        {
                            Console.WriteLine("The security group name cannot be blank");
                            Usage();
                            return;
                        }
                        break;
                    case "-p":
                        i++;
                        spotPrice = args[i];
                        double price;
                        double.TryParse(spotPrice, out price);
                        if (price < 0.001)
                        {
                            Console.WriteLine("The spot price must be > 0.001");
                            Usage();
                            return;
                        }
                        break;
                    case "-c":
                        i++;
                        int.TryParse(args[i], out instanceCount);
                        if (instanceCount < 1)
                        {
                            Console.WriteLine("The instance count must be > 0");
                            Usage();
                            return;
                        }
                        break;
                    case "-h":
                        Usage();
                        return;
                    default:
                        amiId = args[i];
                        break;
                }

                i++;
            }

            // Make sure we have an AMI
            if (amiId == "")
            {
                Console.WriteLine("You must supply an AMI");
                Usage();
                return;
            }

            AmazonEC2Client ec2Client = new AmazonEC2Client(region: region);

            Console.WriteLine("Creating spot instance request");

            SpotInstanceRequest req = RequestSpotInstance(ec2Client, amiId, securityGroupName, instanceType, spotPrice, instanceCount);

            string id = req.SpotInstanceRequestId;

            // Wait for it to become active
            Console.WriteLine("Waiting for spot instance request with ID " + id + " to become active");

            int wait = 1;
            int totalTime = 0;

            while (true)
            {
                totalTime += wait;
                Console.Write(".");

                SpotInstanceState state = GetSpotRequestState(ec2Client, id);

                if (state == SpotInstanceState.Active)
                {
                    Console.WriteLine("");
                    break;
                }

                // wait a bit and try again
                Thread.Sleep(wait);

                // wait longer next time
                // 1, 2, 4, ...
                wait = wait * 2;
            }

            // Should be around 1000 (one second)
            Console.WriteLine("That took " + totalTime + " milliseconds");

            // Cancel the request
            Console.WriteLine("Canceling spot instance request");

            CancelSpotRequest(ec2Client, id);

            // Clean everything up
            Console.WriteLine("Terminating spot instance request");

            TerminateSpotInstance(ec2Client, id);

            Console.WriteLine("Done. Press enter to quit");

            Console.ReadLine();
        }
</programlisting>