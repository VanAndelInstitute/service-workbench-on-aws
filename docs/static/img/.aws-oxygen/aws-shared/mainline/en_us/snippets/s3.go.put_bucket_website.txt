package main

import (
    "flag"
    "fmt"

    "github.com/aws/aws-sdk-go/aws/session"
    "github.com/aws/aws-sdk-go/service/s3"
)

// SetWebPage sets up a bucket as a static website
// Inputs:
//     sess is the current session, which provides configuration for the SDK's service clients
//     bucket is the name of the bucket
//     indexPage is the name of the index page
//     errorPage is the name of the error page
// Output:
//     If success, nil
//     Otherwise, an error from the call to PutBucketWebsite
func SetWebPage(sess *session.Session, bucket, indexPage, errorPage *string) error {
    svc := s3.New(sess)

    params := s3.PutBucketWebsiteInput{
        Bucket: bucket,
        WebsiteConfiguration: &s3.WebsiteConfiguration{
            IndexDocument: &s3.IndexDocument{
                Suffix: indexPage,
            },
        },
    }

    if len(*errorPage) > 0 {
        params.WebsiteConfiguration.ErrorDocument = &s3.ErrorDocument{
            Key: errorPage,
        }
    }

    _, err := svc.PutBucketWebsite(&params)
    if err != nil {
        return err
    }

    return nil
}

func main() {
    bucket := flag.String("b", "", "The name of the bucket")
    indexPage := flag.String("i", "", "The name of the index page")
    errorPage := flag.String("e", "", "The name of the error page (optional)")
    flag.Parse()

    if *bucket == "" || *indexPage == "" {
        fmt.Println("You must supply a bucket name (-b BUCKET) and index page (-i INDEX)")
        return
    }

    sess := session.Must(session.NewSessionWithOptions(session.Options{
        SharedConfigState: session.SharedConfigEnable,
    }))

    err := SetWebPage(sess, bucket, indexPage, errorPage)
    if err != nil {
        fmt.Println("Got an error setting bucket as static website:")
        fmt.Println(err)
        return
    }

    fmt.Println("Set bucket website configuration")
}
