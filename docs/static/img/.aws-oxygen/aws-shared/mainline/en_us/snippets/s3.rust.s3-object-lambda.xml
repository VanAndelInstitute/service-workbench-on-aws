<programlisting>
    // Create an endpoint resolver that creates S3 Object Lambda endpoints.
    let resolver = PartitionResolver::new(
        Partition::builder()
            .id("aws")
            // This regex captures the region prefix, such as the "us" in "us-east-1",
            //  from the client's current region. This captured value is later fed into
            //  the uri_template.
            // If your region isn't covered by the regex below,
            // you can find additional region capture regexes for other regions
            // at https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/src/aws_endpoint.rs.
            .region_regex(r#"^(us|eu|ap|sa|ca|me|af)\-\w+\-\d+$"#)
            .default_endpoint(endpoint::Metadata {
                uri_template: make_uri(&endpoint, &account).await,
                protocol: endpoint::Protocol::Https,
                signature_versions: endpoint::SignatureVersion::V4,
                // Important: The following overrides the credential scope so that request signing works.
                credential_scope: CredentialScope::builder()
                    .service("s3-object-lambda")
                    .build(),
            })
            .regionalized(partition::Regionalized::Regionalized)
            .build()
            .expect("valid partition"),
        vec![],
    );

    // Load configuration and credentials from the environment.
    let shared_config = aws_config::load_from_env().await;

    // Create an S3 config from the shared config and override the endpoint resolver.
    let s3_config = s3::config::Builder::from(&shared_config)
        .endpoint_resolver(resolver)
        .build();

    // Create an S3 client to send requests to S3 Object Lambda.
    let client = s3::Client::from_conf(s3_config);
</programlisting>