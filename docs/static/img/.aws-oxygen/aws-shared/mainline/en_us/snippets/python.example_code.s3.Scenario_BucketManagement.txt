def usage_demo():
    print('-'*88)
    print("Welcome to the Amazon S3 bucket demo!")
    print('-'*88)

    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

    s3_resource = boto3.resource('s3')
    prefix = 'doc-example-bucket-'
    created_buckets = [
        BucketWrapper(s3_resource.Bucket(prefix + str(uuid.uuid1()))) for _ in range(3)]
    for bucket in created_buckets:
        bucket.create()
        print(f"Created bucket {bucket.name}.")

    bucket_to_delete = created_buckets.pop()
    if bucket_to_delete.exists():
        print(f"Bucket exists: {bucket_to_delete.name}.")
    bucket_to_delete.delete()
    print(f"Deleted bucket {bucket_to_delete.name}.")
    if not bucket_to_delete.exists():
        print(f"Bucket no longer exists: {bucket_to_delete.name}.")

    buckets = [b for b in BucketWrapper.list(s3_resource) if b.name.startswith(prefix)]
    for bucket in buckets:
        print(f"Got bucket {bucket.name}.")

    bucket = created_buckets[0]
    bucket.grant_log_delivery_access()
    acl = bucket.get_acl()
    print(f"Bucket {bucket.name} has ACL grants: {acl.grants}.")

    put_rules = [{
        'AllowedOrigins': ['http://www.example.com'],
        'AllowedMethods': ['PUT', 'POST', 'DELETE'],
        'AllowedHeaders': ['*']
    }]
    bucket.put_cors(put_rules)
    get_rules = bucket.get_cors()
    print(f"Bucket {bucket.name} has CORS rules: {json.dumps(get_rules.cors_rules)}.")
    bucket.delete_cors()

    put_policy_desc = {
        'Version': '2012-10-17',
        'Id': str(uuid.uuid1()),
        'Statement': [{
            'Effect': 'Allow',
            'Principal': {'AWS': 'arn:aws:iam::111122223333:user/Martha'},
            'Action': [
                's3:GetObject',
                's3:ListBucket'
            ],
            'Resource': [
                f'arn:aws:s3:::{bucket.name}/*',
                f'arn:aws:s3:::{bucket.name}'
            ]
        }]
    }
    try:
        bucket.put_policy(put_policy_desc)
        policy = bucket.get_policy()
        print(f"Bucket {bucket.name} has policy {json.dumps(policy)}.")
        bucket.delete_policy()
    except ClientError as error:
        if error.response['Error']['Code'] == 'MalformedPolicy':
            print('*'*88)
            print("This demo couldn't set the bucket policy because the principal user\n"
                  "specified in the demo policy does not exist. For this request to\n"
                  "succeed, you must replace the user ARN with an existing AWS user.")
            print('*' * 88)
        else:
            raise

    put_rules = [{
        'ID': str(uuid.uuid1()),
        'Filter': {
            'And': {
                'Prefix': 'monsters/',
                'Tags': [{'Key': 'type', 'Value': 'zombie'}]
            }
        },
        'Status': 'Enabled',
        'Expiration': {'Days': 28}
    }]
    bucket.put_lifecycle_configuration(put_rules)
    get_rules = bucket.get_lifecycle_configuration()
    print(f"Bucket {bucket.name} has lifecycle configuration {json.dumps(get_rules)}.")
    bucket.delete_lifecycle_configuration()

    for bucket in created_buckets:
        bucket.delete()
        print(f"Deleted bucket {bucket.name}.")

    print('Thanks for watching!')
    print('-'*88)
