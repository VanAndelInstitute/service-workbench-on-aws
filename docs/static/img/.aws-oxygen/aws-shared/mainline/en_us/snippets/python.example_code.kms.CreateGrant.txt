    def create_grant(self, key_id):
        """
        Creates a grant for a key that lets a user generate a symmetric data
        encryption key.

        :param key_id: The ARN or ID of the key.
        :return: The grant that is created.
        """
        user = input(
            f"Enter the ARN of an IAM user to grant that user GenerateDataKey "
            f"permissions on key {key_id}.")
        if user != '':
            try:
                grant = self.kms_client.create_grant(
                    KeyId=key_id, GranteePrincipal=user, Operations=['GenerateDataKey'])
            except ClientError as err:
                logger.error(
                    "Couldn't create a grant on key %s. Here's why: %s",
                    key_id, err.response['Error']['Message'])
            else:
                print(f"Grant created on key {key_id}.")
                return grant
        else:
            print("Skipping grant creation.")
